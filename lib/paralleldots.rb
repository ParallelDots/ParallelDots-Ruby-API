require_relative 'config'
require 'rest-client'
require 'json'

def check( api_key, text )
	if api_key == nil or api_key == "" then
		return { "error": "API Key cannot be nil or an empty String." }
	end
	if text.class != String then
		return { "error": "Input has to be a String." }
	end
	if text == "" then
		return { "error": "Input cannot be an empty String." }
	end
	return true
end

def sentiment( text )
	api_key  = get_api_key
	valid    = check( api_key, text )
	if valid != true then
		return valid
	end
	response = RestClient.get "http://apis.paralleldots.com/sentiment", { params: { apikey: api_key, sentence1: text } }
	response = JSON.parse( response )
	response[ "usage" ] = "By accessing ParallelDots API or using information generated by ParallelDots API, you are agreeing to be bound by the ParallelDots API Terms of Use: http://www.paralleldots.com/terms-and-conditions"
	return response
end

def ner( text )
	api_key  = get_api_key
	valid    = check( api_key, text )
	if valid != true then
		return valid
	end
	response = RestClient.post "http://apis.paralleldots.com/ner", { "apikey" => api_key, "text" => text }.to_json
	response = JSON.parse( response )
	response[ "usage" ] = "By accessing ParallelDots API or using information generated by ParallelDots API, you are agreeing to be bound by the ParallelDots API Terms of Use: http://www.paralleldots.com/terms-and-conditions"
	return response
end

def keywords( text )
	api_key  = get_api_key
	valid    = check( api_key, text )
	if valid != true then
		return valid
	end
	response = RestClient.post "http://apis.paralleldots.com/keywords", { apikey: api_key, q: text }
	response = JSON.parse( response )
	response = { "keywords": response, "usage": "By accessing ParallelDots API or using information generated by ParallelDots API, you are agreeing to be bound by the ParallelDots API Terms of Use: http://www.paralleldots.com/terms-and-conditions" }
	return response
end

def intent( text )
	api_key  = get_api_key
	valid    = check( api_key, text )
	if valid != true then
		return valid
	end
	response = RestClient.post "http://apis.paralleldots.com/intent", { apikey: api_key, text: text }
	response = JSON.parse( response )
	response[ "usage" ] = "By accessing ParallelDots API or using information generated by ParallelDots API, you are agreeing to be bound by the ParallelDots API Terms of Use: http://www.paralleldots.com/terms-and-conditions"
	return response
end

def emotion( text )
	api_key  = get_api_key
	valid    = check( api_key, text )
	if valid != true then
		return valid
	end
	response = RestClient.post "http://apis.paralleldots.com/emotion", { apikey: api_key, text: text }
	response = JSON.parse( response )
	response[ "usage" ] = "By accessing ParallelDots API or using information generated by ParallelDots API, you are agreeing to be bound by the ParallelDots API Terms of Use: http://www.paralleldots.com/terms-and-conditions"
	return response
end

def abuse( text )
	api_key  = get_api_key
	valid    = check( api_key, text )
	if valid != true then
		return valid
	end
	response = RestClient.post "http://apis.paralleldots.com/abuse", { apikey: api_key, text: text }
	response = JSON.parse( response )
	response[ "usage" ] = "By accessing ParallelDots API or using information generated by ParallelDots API, you are agreeing to be bound by the ParallelDots API Terms of Use: http://www.paralleldots.com/terms-and-conditions"
	return response
end

def taxonomy( text )
	api_key  = get_api_key
	valid    = check( api_key, text )
	if valid != true then
		return valid
	end
	response = RestClient.post "http://apis.paralleldots.com/taxonomy", { "apikey" => api_key, "sentence1" => text }.to_json
	response = JSON.parse( response )
	response[ "usage" ] = "By accessing ParallelDots API or using information generated by ParallelDots API, you are agreeing to be bound by the ParallelDots API Terms of Use: http://www.paralleldots.com/terms-and-conditions"
	return response
end

def similarity( text_1, text_2 )
	api_key  = get_api_key
	valid_1  = check( api_key, text_1 )
	valid_2  = check( api_key, text_2 )
	if valid_1 != true or valid_2 != true then
		return { "text_1": valid_1, "text_2": valid_2 }
	end
	response = RestClient.get "http://apis.paralleldots.com/semanticsimilarity", { params: { apikey: api_key, sentence1: text_1, sentence2: text_2 } }
	response = JSON.parse( response )
	response[ "usage" ] = "By accessing ParallelDots API or using information generated by ParallelDots API, you are agreeing to be bound by the ParallelDots API Terms of Use: http://www.paralleldots.com/terms-and-conditions"
	return response
end

def multilang_sentiment( text, lang )
	api_key  = get_api_key
	valid_1  = check( api_key, text )
	valid_2  = check( api_key, lang )
	if valid_1 != true or valid_2 != true then
		return { "text": valid_1, "lang": valid_2 }
	end
	response = RestClient.post "http://apis.paralleldots.com/multilang_sentiment", { apikey: api_key, text: text, lang: lang }
	response = JSON.parse( response )
	response[ "usage" ] = "By accessing ParallelDots API or using information generated by ParallelDots API, you are agreeing to be bound by the ParallelDots API Terms of Use: http://www.paralleldots.com/terms-and-conditions"
	return response
end